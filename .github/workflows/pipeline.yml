# This exists as our open data pipeline.
# It runs the opendata-pipeline CLI app with some enhancements for CI/CD.

name: OpenData Pipeline

# Controls when the workflow will run
on:
  schedule:
    - cron: "0 5 * * 1"

  # can do manually
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # fetch the data
  fetch-data:
    name: Fetch Data

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      # setup python
      - name: Set up Python
        run: uv python install

      # install latest version of CLI
      - name: Install the project
        run: uv sync --all-extras --dev

      # initialize data dir
      - name: Initialize App
        run: uv run opendata-pipeline init

      # fetch records
      - name: Run fetching
        # here we can read local (which is latest remote)
        # BUT we still need to update the remote
        run: uv run opendata-pipeline fetch --update-remote
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Drug Prep Artifact
        uses: actions/upload-artifact@v3
        with:
          name: drug-files
          path: data/*_drug_prep.csv

      - name: Upload Records Artifact
        uses: actions/upload-artifact@v3
        with:
          name: records-files
          path: data/*_records.jsonl

  # extract drugs from the data
  extract-drugs:
    name: Extract Drugs

    # requires data to be fetched
    needs: fetch-data

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      # setup python
      - name: Set up Python
        run: uv python install

      # install latest version of CLI
      - name: Install the project
        run: uv sync --all-extras --dev

      # download drug_prep records (should be in data folder)
      - name: Download Drug Prep Artifact
        uses: actions/download-artifact@v3
        with:
          name: drug-files
          path: data
      # install rust CLI program
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Run drug extraction
        # again we don't need to `--use-remote` because we checked it out
        run: uv run opendata-pipeline extract-drugs

      # Upload drug data file artifact
      - uses: actions/upload-artifact@v3
        with:
          name: drug-output
          path: data/drug_*

  # geocode the data
  geocode:
    name: Geocode

    # requires data to be fetched
    needs: fetch-data

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      # setup python
      - name: Set up Python
        run: uv python install

      # install latest version of CLI
      - name: Install the project
        run: uv sync --all-extras --dev

      # download records (should be in data folder)
      - name: Download Records Artifact
        uses: actions/download-artifact@v3
        with:
          name: records-files
          path: data

      - name: Run geocoding
        # again we don't need to `--use-remote` because we checked it out
        run: uv run opendata-pipeline geocode
        # use env here to scope to this command
        env:
          # get from github secrets
          ARCGIS_API_KEY: ${{ secrets.ARCGIS_TOKEN }}

      # Upload geocoding file artifact
      - uses: actions/upload-artifact@v3
        with:
          name: geocoding-output
          path: data/geocoded_data.jsonl

  # analyze/combine the data
  join:
    name: Join Files

    # requires data to be fetched
    needs: [extract-drugs, geocode]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      # setup python
      - name: Set up Python
        run: uv python install

      # install latest version of CLI
      - name: Install the project
        run: uv sync --all-extras --dev

      # download records (should be in data folder)
      - name: Download Records Artifact
        uses: actions/download-artifact@v3
        with:
          name: records-files
          path: data

      # download records (should be in data folder)
      - name: Download Drug Artifact
        uses: actions/download-artifact@v3
        with:
          name: drug-output
          path: data

      # download records (should be in data folder)
      - name: Download Geocoding Artifact
        uses: actions/download-artifact@v3
        with:
          name: geocoding-output
          path: data

      - name: Run analyzer
        run: uv run opendata-pipeline analyze

      - name: Run geospatial joining
        run: uv run opendata-pipeline spatial-join

      - name: Upload All Data
        uses: actions/upload-artifact@v3
        with:
          name: all-data
          path: data

  profile:
    name: Profile

    # requires data to be joined
    needs: [join]

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4

      # download records (should be in data folder)
      - name: Download Records Artifact
        uses: actions/download-artifact@v3
        with:
          name: all-data
          path: data

      # download drug files (should be in data folder)
      - name: Download Records Artifact
        uses: actions/download-artifact@v3
        with:
          name: drug-output
          path: data

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      # setup python
      - name: Set up Python
        run: uv python install 3.12

      - name: Run profiling
        run: ./scripts/profile.sh

      - name: Prepare Data for Release Assets
        run: ./scripts/prepare_data_release.sh

      - name: Upload assets artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: assets

  release:
    name: Release Data

    needs: profile

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Records Artifact
        uses: actions/download-artifact@v3
        with:
          # should now be in assets folder
          name: release-assets
          path: assets

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      # use a community action
      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          # auto set by github
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ steps.date.outputs.date }}"
          prerelease: false
          # uses today's date
          title: ${{ steps.date.outputs.date }}
          files: |
            README.md
            LICENSE
            assets/*
